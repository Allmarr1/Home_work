"""
згенерувати квадратну матрицю 'око' - всі значення 0-лі а по діагоналі 1ки

"""

def eye_matrix(size):
    pass

assert eye_matrix(3) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
assert eye_matrix(4) == [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]

"""
Написати програму яка знаходить друге найменше число в списку. 
1) з використанням методів списків, та вбудованих функцій
2) без використання методів списків
"""

def second_smallest(array):
    pass

assert second_smallest([1, 1, 2, 2, 3]) == 2
assert second_smallest([-1, 10, -2, 2]) == -1

"""
написати програму яка перетворює список на строку
1) без методів строк 
2) з =)
"""

def list_to_string(array):
    pass

assert list_to_string(["l", "i", "s", "t"]) == "list"
assert list_to_string(["l", "i", "s", "t", 5, 1.1]) == "list51.1"

"""
написати програму, яка приймає два списки та видає новий список зі спільними унікальними елементами
"""

def list_intercection(list1, list2):
    pass

assert list_intercection([1, 1, 1, 2], [1, 3, 4]) == [1, ]
assert list_intercection(["foo", 1, "bar"], [2, 3, 4]) == None
assert list_intercection(["foo", 1, "bar"], []) == None
assert list_intercection(["foo", 1, "bar"], [4, "foo", 7]) == ["foo", ]

"""
Із списку, цілі числа з'єднати в одне число
варіант із зірочкою - заборонено переведення із строкового в числовий тип і навпаки
"""

def join_ints(my_list):
    pass

assert join_ints([1, 2, 3]) == 123
assert join_ints([1, "foo", 2.5, 1, 1, 4, "abr", 3]) == 11143

"""
Реалізувати метод строк split() самостійнр
"""
def my_split():
    pass

assert my_split("Karamba", "a") == ['K', 'r', 'mb', '']

"""
Бонусне завдання
Взяти програму повернення матриці з лекції, та зробити на її основі фунцію, що повертає матрицю, на довільне(кратне 90)
число градусув. Асерти на вас.


"""
